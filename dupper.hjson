{
  ports: 
  [
    "8080:8080",    // node-inspector
    "8000:8000",     // c9
    "3000:3000"     // default expressjs port
  ],  
  env:
  [
    "NODE_ENV=development",
    "PORT=3000"
  ],
  dependencies: 
  [
    {
      name: "linux-dependencies",
      cmd:
      '''
        apt-get -y install curl wget libfontconfig
        curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
        apt-get -y install nodejs daemon mongodb
      '''
    },
    {
      name: "nodejs-dependencies",
      cmd:
      '''
        npm install -g bower gulp node-inspector
        cd $REPO_ROOT
        npm install
      ''',
      watch: "package.json"
    },
    {
      name: "bower-dependencies",
      cmd:
      '''
        cd $REPO_ROOT
        if [[ -f bower.json ]]; then 
            bower install --allow-root
        fi
      ''',
      watch: "bower.json"
    },
    {
      name: "cloud-9-sdk-dependencies",
      cmd:
      '''    
        apt-get install -y build-essential g++ curl libssl-dev apache2-utils libxml2-dev sshfs python2.7 python2.7-dev
        git clone https://github.com/c9/core.git cloud9
        cd cloud9
        scripts/install-sdk.sh
        sed -i -e 's_127.0.0.1_0.0.0.0_g' configs/standalone.js 
      '''
    }     
  ],
  commands: {
    build: [{
      server:
      '''
         set -e
         npm build
      '''
    }],    
    start: [{
      server:
      '''
        # Check Mogodb service and start if not running
         service mongodb status > /dev/null 2>&1
         if [[ $? -ne 0 ]]
         then
            service mongodb start
         fi

         set -e
         npm start
      '''
    }],
    test: [{
      server:
      '''
         # Check Mogodb service and start if not running
         service mongodb status > /dev/null 2>&1
         if [[ $? -ne 0 ]]
         then
            service mongodb start
         fi

         set -e
         npm test
      '''
    }],    
    debug: [{
        server:
        '''
            # Start debugger in background detached from terminal
            [ -f /var/run/start.pid ]
            exit_code=$?
            _export exit_code
    
            if [[ $exit_code -ne 0 ]]
            then
                echo "Node.js peoject not running, start using below command:"
                echo "Usage:"
                echo "    dupper exec $REPO_NAME start"
                exit 1
            fi
            
            # Start debugger in background detached from terminal
            daemon --name="node-inspector" --output=node-inspector.out -F /var/run/node-inspector.pid -D $REPO_ROOT -X /usr/bin/node \
            /usr/bin/node-inspector -- --web-port=8080 --web-host=0.0.0.0
            
            exit_code="$?"
            _export exit_code
        '''
      },{
        client:
        '''
          os="$(uname -s)"
          if [[ $os == "Darwin" ]]; then
            [ $exit_code -eq 0 ] && open http://$SERVER_IP:8080/
          fi        
        '''
    }],
    c9: [{
      server:
      '''
          # Start debugger in background detached from terminal
          start-stop-daemon -b --start --quiet --oknodo \
          --pidfile /var/run/c9.pid --exec $HOME/.c9/node/bin/node \
          -- /root/cloud9/server.js --listen 0.0.0.0 --port 8000 -w $REPO_ROOT
          exit_code=$?
          _export exit_code
      '''
    },{
      client:
      '''
         # Open browser on Mac if C9 started successfully
          os="$(uname -s)"
          if [[ $os == "Darwin" ]]; then
              [ $exit_code -eq 0 ] && open http://$SERVER_IP:8000/  
          fi        
      '''
    }],    
    heroku-deploy: [{
        server:
        '''
            cd $REPO_ROOT
            ENVFILE=$REPO_ROOT/.env.heroku
            
            EMAIL=$(git config --global user.email)
            if [[ -z $EMAIL ]]
            then
                printf "Enter Email for git commit: "
                read EMAIL
                [ -z $EMAIL ] && echo "Invalid email address" && exit 1
                git config --global user.email $EMAIL
            fi

            NAME=$(git config --global user.name)
            if [[ -z $NAME ]]
            then
                printf "Enter Name for git commit: "
                read NAME
                [ -z $EMAIL ] && echo "Invalid Name" && exit 1
                git config --global user.name $NAME
            fi

            [ -f $ENVFILE ] && APP_NAME=$(source $ENVFILE; echo $APP_NAME)
            
            if [[ -z $APP_NAME ]]
            then
                # Generate APP Name and APP URL from user.name
                APP_NAME=$(echo $NAME | awk '{print $1;}')
                APP_NAME="${APP_NAME,,}-${RANDOM}${RANDOM}"
                echo "APP_NAME=$APP_NAME" > $ENVFILE
            fi

            APP_URL=$(source $ENVFILE; echo $APP_URL)
            if [[ -z $APP_URL ]]
            then
                APP_URL=https://${APP_NAME}.herokuapp.com/
                echo "APP_URL=$APP_URL" >> $ENVFILE
            fi

            REMOTE_APP_NAME=$(heroku domains  --app $APP_NAME --json 2>&1 | jq -r .[0].app.name 2>&1)
            # Get config from user if .env file doesnt exists
            if [[ $REMOTE_APP_NAME != $APP_NAME ]]
            then
                # Create Heroku app and add MONGODB URI addon
                heroku create $APP_NAME
                [ $? -ne 0 ] && exit 1
            fi

            MONGODB_URI=$(heroku config:get MONGODB_URI --app $APP_NAME)
            if [[ -z $MONGODB_URI ]]
            then
                heroku addons:create mongolab --app $APP_NAME
                [ $? -ne 0 ] && exit 1
                MONGODB_URI=$(heroku config:get MONGODB_URI --app $APP_NAME)
                echo "MONGO_URI=$MONGODB_URI" >> $ENVFILE
            fi

            HEROKU_GITURL=$(heroku apps:info $APP_NAME --json | jq -r .app.git_url)
            [ $? -ne 0 ] && exit 1

            if [[ $GITURL != $HEROKU_GITURL ]]
            then
                git remote rm heroku
                git remote add heroku $HEROKU_GITURL
            fi
            
            git push heroku master
            URL=$(heroku domains --app $APP_NAME --json | jq .[0].hostname)
            _export URL
        '''
      },{
        client:
        '''
          # Open APP URL on Mac
          os="$(uname -s)"
          if [[ $os == "Darwin" ]]; then
            [[ ${URL:-} != "" ]] && open https://$URL
          else
            echo "Heroku app deployed at https://$URL"
          fi        
        '''
    }],    
    heroku-delete: [{
        server:
        '''
            cd $REPO_ROOT
            ENVFILE=$REPO_ROOT/.env.heroku

            [ -f $ENVFILE ] && APP_NAME=$(source $ENVFILE; echo $APP_NAME)
            
            if [[ -n $APP_NAME ]]
            then
                git remote remove heroku
                heroku apps:destroy --app $APP_NAME --confirm $APP_NAME
                rm $ENVFILE
            else 
                echo "App not Found"
            fi            
        '''
    }],   
  }
}
